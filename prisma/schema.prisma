// This is your Prisma schema file,
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  role           Role        @default(USER)
  createdAt      DateTime    @default(now())
  accounts       Account[]
  sessions       Session[]
  templates      Template[]
  purchasedTemplates PurchasedTemplate[]
  stripeCustomerId String?   @unique
  stripeSubscriptionId String?
}
enum Role {
  USER
  CREATOR
  ADMIN
}
model Template {
  id                String    @id @default(cuid())
  title             String
  description       String
  price             Float
  githubUrl         String
  previewUrl        String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  authorId          String
  author            User      @relation(fields: [authorId], references: [id])
  purchasedBy       PurchasedTemplate[]
  deploymentCount   Int       @default(0)
  avgCustomizationTime Float?
  rating            Float     @default(0)
  ratings           Rating[]
  technologies      Technology[]
  category          Category  @relation(fields: [categoryId], references: [id])
  categoryId        String
}
model PurchasedTemplate {
  id          String   @id @default(cuid())
  purchasedAt DateTime @default(now())
  templateId  String
  template    Template @relation(fields: [templateId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      PurchaseStatus @default(PENDING)
}
enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
}
model Rating {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  templateId  String
  template    Template @relation(fields: [templateId], references: [id])
}
model Technology {
  id        String     @id @default(cuid())
  name      String     @unique
  templates Template[]
}
model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  templates Template[]
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}